library(dplyr)
b <- colnames(groupsCompare)
name <- gsub("words.*", "",b)
me <- data.frame(matrix(ncol = 1, nrow = length(groupsCompare[,1]), dimnames= list(name)))
for (i in 1:length(groupsCompare)) {
me[i,]<- dialectComparison(entity1 = "C:\\Users\\willc\\Desktop\\New folder\\mewordsDict.csv", entity2 = paste0("C:\\Users\\willc\\Desktop\\New folder\\", i))
}
me
}
View(meCompare())
meCompare <- function() {
library(dplyr)
b <- colnames(groupsCompare)
name <- gsub("words.*", "",b)
me <- data.frame(matrix(ncol = 1, nrow = length(groupsCompare[,1]), dimnames= list(name, name)))
for (i in row.names(groupsCompare)) {
me[i,]<- dialectComparison(entity1 = "C:\\Users\\willc\\Desktop\\New folder\\mewordsDict.csv", entity2 = paste0("C:\\Users\\willc\\Desktop\\New folder\\", i))
}
me
}
View(meCompare())
groupsCompare
groupsCompare[,1]
meCompare <- function() {
library(dplyr)
b <- colnames(groupsCompare)
name <- gsub("words.*", "",b)
me <- data.frame(matrix(ncol = 1))
for (i in row.names(groupsCompare)) {
me[i,]<- dialectComparison(entity1 = "C:\\Users\\willc\\Desktop\\New folder\\mewordsDict.csv", entity2 = paste0("C:\\Users\\willc\\Desktop\\New folder\\", i))
}
me
}
View(meCompare())
differentWordUsage()
View(differentWordUsage())
View(differentWordUsage())
View(differentWordUsage())
View(differentWordUsage())
View(differentWordUsage())
View(similarWordUsage())
View(differentWordUsage())
View(differentWordUsage())
table(temp)
table(rand)
table()
table(temp)
table(rand)
table(data7)
table(bird)
hist(temp)+
hist(rand)
hist(temp)
hist(temp)
hist(rand)
hist(data7)
hist(bird)
hist(temp, col = colors(), main = 'temp data', xlab = 'x label', ylab = 'y label')
colors()
hist(temp, col = 'yellowgreen', main = 'temp data', xlab = 'x label', ylab = 'y label', xlim = c(0,120), ylim = c(0,3.5))
?rnorm
rnorm(3000, mean = 10268, sd = 1)
rnorm(3000, mean = 10268, sd = 124)
sales <- rnorm(3000, mean = 10268, sd = 124)
t.test(sales, mu = 10000, alternative = 'less')
?t.test
sales <- rnorm(3000000, mean = 10268, sd = 124)
t.test(sales, mu = 10000, alternative = 'less')
sales <- rnorm(30, mean = 10268, sd = 124)
t.test(sales, mu = 10000, alternative = 'less')
t.test(sales, mu = 10000, alternative = 'less')
t.test(sales, mu = 10000, alternative = 'greater')
sales <- rnorm(3000, mean = 10268, sd = 124)
t.test(sales, mu = 10000, alternative = 'greater')
268/124
t.test(sales, mu = 11000, alternative = 'greater')
t.test(sales, mu = 11000)
sales <- rnorm(3000, mean = 10268, sd = 124)
hist(sales)
t.test(sales, mu = 10000)
t.test(sales, mu = 10200)
sales <- rnorm(30, mean = 10268, sd = 124)
t.test(sales, mu = 10200)
sales <- rnorm(30, mean = 10268, sd = 124)
t.test(sales, mu = 10000)
hist(sales)
t.test(sales, mu = 10000, alternative = 'greater')
sales <- rnorm(1, mean = 10268, sd = 124)
t.test(sales, mu = 10000, alternative = 'greater')
sales <- rnorm(2, mean = 10268, sd = 124)
t.test(sales, mu = 10000, alternative = 'greater')
sales <- rnorm(3000, mean = 10268, sd = 124)
t.test(sales, mu = 10000, alternative = 'less')
hist(sales)
sales
hist(sales)
t.test(sales, mu = 10000, alternative = 'less')
t.test(sales, mu = 10000, alternative = 'greater')
orchid$open
t.test(orchid$open, mu = 6, alternative = 'less')
t.test(orchid$open, mu = 7, alternative = 'less')
sales <- rnorm(300, mean = 10268, sd = 124, fix = TRUE )
sales <- rnorm(300, mean = 10268, sd = 124, fixed = TRUE )
sales <- rnorm(300, mean = 10268, sd = 124)
sales
t.test(sales, mu = 10000)
t.test(sales, mu = 10000, alternative = 'greater')
sales
for (i in sales0 {print(sales[i])}
for (i in sales) {print(sales[i])}
sales[1]
for (i in 1:length(sales)) {print(sales[i])}
mean(sales)
min(sales)
268/124
(10268-10000)/124
m = 10268
sd = 124
(m-10000)/sd
(10000-m)/sd
z <- (10000-m)/sd
pnorm(z)
pnorm(z)*100
pnorm(z)
pnorm(2)
pnorm(1)
?pnorm
pnorm(z, lower.tail = TRUE)
pnorm(z, lower.tail = FALSE)
m <- 10268
sd <- 124
z <- (10000 - m)/sd
pnorm(z)
pnorm((10000 - 10268)/124)
m <- 10268
sd <- 124
z <- (10000 - m)/sd
z
pnorm(z)
m <- 10268
sd <- 1243
m <- 10268
sd <- 124
z <- (10398 - m)/sd
pnorm(z)
m <- 10268
sd <- 124
z <- (m - 10398) / sd
pnorm(z)
m <- 10268
sd <- 124
uz <- (m - 10116) / sd
lz <- (m - 9984) / sd
pnorm(uz) - pnorm(lz)
uz
lz
m <- 10268
sd <- 124
lz <- (9984 - m) / sd
uz <- (10116 - m)/ sd
pnorm(uz) - pnorm(lz)
pnorm(2)
pnorm(-2)
pnorm(2)-pnorm(-2)
pnorm(1.96)-pnorm(-1.96)
1.96*124
.25*sd+m
.25*sd+m -> uv
uv
uv-m
?invNorm
qnorm(.95)
qnorm(.975)
qnorm(.975) * sd + m
qnorm(.975) * sd - m
qnorm(.975) * sd + m
-qnorm(.975) * sd + m
qnorm(.975) * sd + m -> uv
-qnorm(.975) * sd + m -> lv
(m-lv) / sd
(uv - m) / sd
upperValue <- qnorm(.95) * sd + m
uppervalue <- qnorm(.975) * sd + m
lowervalue <- -qnorm(.975 * sd - m)
upperValue <- qnorm(.975) * sd + m
lowervalue <- -qnorm(.975) * sd - m
uppervalue
lowervalue
lowervalue <- -qnorm(.975) * sd + m
lowervalue
upperValue <- qnorm(.975) * sd + m
lowerValue <- -qnorm(.975) * sd + m
lowerValue
upperValue
upperValue <- qnorm(.975) * 124 + 10268
upperValue <- qnorm(.975) * 124 + 10268
lowerValue <- -qnorm(.975) * 124 + 10268
lowerValue
upperValue
fw
?boxplot
mf
pg
fw2
boxplot(mf$Algae)
boxplot(pg$growth)
boxplot(mf$Algae)
boxplot(pg$growth)
boxplot(fw2$flow)
boxplot(mf$Algae, pg$growth, fw2$flow)
boxplot(mf$Algae, pg$growth, fw2$flow main = 'Title')
boxplot(mf$Algae, pg$growth, names = c('Algae', 'Growth', 'Flow'))
boxplot(mf$Algae, pg$growth, fw2$flow, names = c('Algae', 'Growth', 'Flow'))
title(main = 'Title', xlab = 'Variable', ylab = 'Value')
plot(mf$Length, mf$Speed)
plot(fw2$abund, fw2$flow)
plot(mf$Length, mf$Speed)
title(main = 'Speed by Length', xlab = 'Length', ylab = 'Speed')
plot(mf$Length, mf$Speed)
title(main = 'Speed by Length', xlab = 'Length', ylab = 'Speed')
plot(mf$Length, mf$Speed, xlab = 'Length', ylab = 'Speed')
title(main = 'Speed by Length')
plot(fw2$abund, fw2$flow)
plot(fw2$abund, fw2$flow, main = 'Flow by Abundance')
plot(mf$Length, mf$Speed, main = 'Speed by Length', xlab = 'Length', ylab = 'Speed')
plot(fw2$abund, fw2$flow, main = 'Flow by Abundance')
plot(fw2$abund, fw2$flow, main = 'Flow by Abundance', xlab = 'Abundance', ylab = 'Flow')
#1. Create an appropriate boxplot for mf$Algae, pg$growth, and fw2$flow
#2. Customize the boxplots to include an appropriate title and appropriate labes for the X-axis and Y-axis for mf$Algae, pg$growth, and fw2$flow.
boxplot(mf$Algae, pg$growth, fw2$flow, names = c('Algae', 'Growth', 'Flow'))
title(main = 'Title', xlab = 'Variable', ylab = 'Value')
#3. For the "mf" object (mf$Length and mf$Speed) and the "fw2" object (fw2$abund and fw2$flow), create an appropriate scatter plot and include an appropriate title and appropriate labels for each axis
plot(mf$Length, mf$Speed, main = 'Speed by Length', xlab = 'Length', ylab = 'Speed')
plot(fw2$abund, fw2$flow, main = 'Flow by Abundance', xlab = 'Abundance', ylab = 'Flow')
#4. Using the "pg" object, create an appropriate line chart that plots growth on the X-axis and nutrient on the Y-axis. Include an appropriate title and appropriate labels for the X-axis and Y-axis.
#4. Using the "pg" object, create an appropriate line chart that plots growth on the X-axis and nutrient on the Y-axis. Include an appropriate title and appropriate labels for the X-axis and Y-axis.
pg
#4. Using the "pg" object, create an appropriate line chart that plots growth on the X-axis and nutrient on the Y-axis. Include an appropriate title and appropriate labels for the X-axis and Y-axis.
plot(pg, type = 'b')
#4. Using the "pg" object, create an appropriate line chart that plots growth on the X-axis and nutrient on the Y-axis. Include an appropriate title and appropriate labels for the X-axis and Y-axis.
plot(pg, type = 1)
#4. Using the "pg" object, create an appropriate line chart that plots growth on the X-axis and nutrient on the Y-axis. Include an appropriate title and appropriate labels for the X-axis and Y-axis.
plot(pg, type = '1')
#4. Using the "pg" object, create an appropriate line chart that plots growth on the X-axis and nutrient on the Y-axis. Include an appropriate title and appropriate labels for the X-axis and Y-axis.
plot(pg, type = 'l')
title(main = 'Nutrients by Growth', xlab = 'Growth Value', ylab = 'Nutrient Value')
#4. Using the "pg" object, create an appropriate line chart that plots growth on the X-axis and nutrient on the Y-axis. Include an appropriate title and appropriate labels for the X-axis and Y-axis.
plot(pg, type = 'l', xlab = 'Growth Value', ylab = 'Nutrient Value')
title(main = 'Nutrients by Growth', xlab = 'Growth Value', ylab = 'Nutrient Value')
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pg
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth)
pie(pg$nutrient)
?pie
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, init.angle = 180)
?pie
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, labels = names(pg), init.angle = 180)
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, labels = names(pg[,1]), init.angle = 180)
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, labels = c('Growth', names(pg[,1])), init.angle = 180)
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, labels = c('Growth', names(pg[,1])), init.angle = 180)
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, labels = c('Growth' + names(pg[,1])), init.angle = 180)
?qnorm
qnorm(.975, mean = 10268, sd = 124)
qnorm(.975, mean = 10268, sd = 124, lower.tail = FALSE)
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, labels = c('Growth' + names(pg[,1])), init.angle = 180)
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, labels = c('Growth', init.angle = 180)
)
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, labels = 'Growth', init.angle = 180)
?pie
pg
row.names(pg)
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, labels = row.names(pg), init.angle = 180)
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, labels = row.names(pg), init.angle = 180, main = 'PG Growth')
pie(pg$nutrient, labels = row.names(pg), init.angle = 180, main = 'PG Nutrient')
#1. Create an appropriate boxplot for mf$Algae, pg$growth, and fw2$flow
#2. Customize the boxplots to include an appropriate title and appropriate labes for the X-axis and Y-axis for mf$Algae, pg$growth, and fw2$flow.
boxplot(mf$Algae, pg$growth, fw2$flow, names = c('Algae', 'Growth', 'Flow'))
title(main = 'Title', xlab = 'Variable', ylab = 'Value')
title(main = 'Comparison of Algae, Growth, and Flow', xlab = 'Variable', ylab = 'Value')
#1. Create an appropriate boxplot for mf$Algae, pg$growth, and fw2$flow
#2. Customize the boxplots to include an appropriate title and appropriate labes for the X-axis and Y-axis for mf$Algae, pg$growth, and fw2$flow.
boxplot(mf$Algae, pg$growth, fw2$flow, names = c('Algae', 'Growth', 'Flow'))
title(main = 'Comparison of Algae, Growth, and Flow', xlab = 'Variable', ylab = 'Value')
#1. Create an appropriate boxplot for mf$Algae, pg$growth, and fw2$flow
#2. Customize the boxplots to include an appropriate title and appropriate labes for the X-axis and Y-axis for mf$Algae, pg$growth, and fw2$flow.
boxplot(mf$Algae, pg$growth, fw2$flow, names = c('Algae', 'Growth', 'Flow'))
title(main = 'Comparison of Algae, Growth, and Flow', xlab = 'Field', ylab = 'Value')
#1. Create an appropriate boxplot for mf$Algae, pg$growth, and fw2$flow
#2. Customize the boxplots to include an appropriate title and appropriate labes for the X-axis and Y-axis for mf$Algae, pg$growth, and fw2$flow.
boxplot(mf$Algae, pg$growth, fw2$flow, names = c('Algae', 'Growth', 'Flow'))
title(main = 'Comparison of Algae, Growth, and Flow', xlab = 'Field', ylab = 'Quantity')
#1. Create an appropriate boxplot for mf$Algae, pg$growth, and fw2$flow
#2. Customize the boxplots to include an appropriate title and appropriate labes for the X-axis and Y-axis for mf$Algae, pg$growth, and fw2$flow.
boxplot(mf$Algae, pg$growth, fw2$flow, names = c('Algae', 'Growth', 'Flow'))
title(main = 'Comparison of Algae, Growth, and Flow', xlab = 'Field', ylab = 'Quantity')
#3. For the "mf" object (mf$Length and mf$Speed) and the "fw2" object (fw2$abund and fw2$flow), create an appropriate scatter plot and include an appropriate title and appropriate labels for each axis
plot(mf$Length, mf$Speed, main = 'Speed by Length', xlab = 'Length', ylab = 'Speed')
plot(fw2$abund, fw2$flow, main = 'Flow by Abundance', xlab = 'Abundance', ylab = 'Flow')
plot(fw2$abund, fw2$flow, main = 'Flow by Abundance', xlab = 'Abundance', ylab = 'Flow')
#4. Using the "pg" object, create an appropriate line chart that plots growth on the X-axis and nutrient on the Y-axis. Include an appropriate title and appropriate labels for the X-axis and Y-axis.
plot(pg, type = 'l', xlab = 'Growth Value', ylab = 'Nutrient Value')
title(main = 'Nutrients by Growth')
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, labels = row.names(pg), init.angle = 180, main = 'PG Growth')
pie(pg$nutrient, labels = row.names(pg), init.angle = 180, main = 'PG Nutrient')
?pie
#5. Using the "pg" object, create two pie charts that show growth and nutrients. Include an appropriate title and appropriate labels in the chart and provide an appropriate starting point of 180 degrees.
pie(pg$growth, labels = row.names(pg), init.angle = 180, main = 'PG Growth')
library(WHO)
library(dplyr)
mort <- glob2rx("*mortality*")
death <- glob2rx("*death*")
codes <- get_codes()
View(codes)
indexes <- c(grep(mort, codes$display), grep(death, codes$display))
mortDeathRows <- codes[indexes, ]
mortDeathLabels <- codes[indexes,1]
View(mortDeathRows)
causes <- glob2rx("*auses*")
index <- grep(causes, codes$display)
causesRows <- codes[index, ]
causesLabels <- codes[index, 1]
View(causesRows)
i <- glob2rx("*opulation*")
p<- grep(i,  codes$display)
population <- codes[p,]
View(population)
mortRate <- get_data("WHOSIS_000004")
mortRate <- filter(mortRate, country != '')
mortRatebyRegion <- get_data("WHOSIS_000004")
mortRatebyRegion <- mortRatebyRegion %>%
group_by(region) %>%
summarise(value = mean(value))
View(mortRatebyRegion)
mortRatebyCountry <- mortRate %>%
group_by(country) %>%
summarise(value = mean(value))
View(mortRatebyCountry)
lifebyCountry <- life %>%
group_by(country) %>%
summarise(value = mean(value))
View(lifebyCountry)
lifebyCountry <- life %>%
group_by(country) %>%
summarise(value = mean(value))
i <- glob2rx("*ncome*")
index <- grep(i, codes$display)
income <- codes[p,]
View(income)
income <- get_data("WHS9_93")
incomebyCountry <- filter(income, country != "")
incomebyCountry <- filter(incomebyCountry, value != "")
incomebyCountry$value <- as.numeric(incomebyCountry$value)
incomebyCountry$value
sum(incomebyCountry$value)
incomebyCountry <- incomebyCountry %>%
group_by(country) %>%
summarise(value = mean(value))
View(incomebyCountry)
is.numeric(incomebyCountry$value)
?scale
mortRatebyRegion <- get_data("WHOSIS_000004")
View(get_data("WHS2_162"))
View(get_data("WHS2_160"))
View(get_data("WHS2_161"))
View(get_data("WHS2_163"))
View(get_data("WHS2_513"))
View(get_data("SA_0000001473"))
View(get_data("SA_0000001472"))
View(get_data("WHS2_3070_cancer"))
View(get_data("WHS2_3070_cdd"))
View(get_data("WHS2_3070_chronic"))
View(get_data("HIV_0000000006"))
View(get_data("MOR_300"))
View(get_data("MORT_300"))
View(get_data("MORT_300"))
summary(get_data("SDGCODCOMPLETENESS"))
View(get_data("SDGCODCOMPLETENESS"))
View(get_data("WHS9_88"))
View(get_data("SA_0000001473"))
install.packages(‘HMDHFDplus’)
install.packages("HMDHFDplus")
View(get_data("MortIcd10"))
MortIcd10
MortIcd10_part1 <- read.csv("\Mort\Morticd10_part1\Morticd10_part1.csv")
MortIcd10_part1 <- read.csv("Mort\Morticd10_part1\Morticd10_part1.csv")
MortIcd10_part1 <- read.csv("Mort\\Morticd10_part1\\Morticd10_part1.csv")
MortIcd10_part1 <- read.csv("/Mort/Morticd10_part1/Morticd10_part1.csv")
MortIcd10_part1 <- read.csv("Mort/Morticd10_part1/Morticd10_part1.csv")
MortIcd10_part1 <- read.table(file = "/Mort/Morticd10_part1/Morticd10_part1.txt", header = TRUE, sep = ',')
MortIcd10_part1 <- read.table(file = "/Mort/Morticd10_part1.txt", header = TRUE, sep = ',')
getwd()
setwd("/Mort")
MortIcd10_part1 <- read.table(file = "/Mort/Morticd10_part1.txt", header = TRUE, sep = ',')
setwd("/Mort/Morticd10_part1")
work_dir <- "/Mort/Morticd10_part1"
setwd(work_dir)
work_dir <- "C:\Users\willc\Desktop\New folder\Mort\Morticd10_part1"
setwd("C:\Users\willc\Desktop\New folder\Mort\Morticd10_part1")
setwd("\Users\willc\Desktop\New folder\Mort\Morticd10_part1")
setwd("C:\\Users\\willc\\Desktop\\New folder\\Mort\\Morticd10_part1")
getwd()
Mort_part1 <- read.table("Morticd10_part1.txt", header = TRUE, sep = ',')
ls()
getwd(ls())
ls(getwd())
list.dirs()
list.files()
Mort_part1 <- read.table("Morticd10_part1.txt", header = TRUE, sep = ',')
Mort_part1 <- read.table("/Morticd10_part1.txt", header = TRUE, sep = ',')
Mort_part1 <- read.table("\\Morticd10_part1.txt", header = TRUE, sep = ',')
getwd()
setwd("C:/Users/willc/Desktop/New folder/Mort")
Mort_part1 <- read.table("Morticd10_part1/Morticd10_part1.txt", header = TRUE, sep = ',')
Mort_part1 <- read.table("/Morticd10_part1/Morticd10_part1.txt", header = TRUE, sep = ',')
file.exists("/Morticd10_part1")
file.exists("Morticd10_part1")
file.exists("Morticd10_part1/Morticd10_part1.txt")
file.exists("Morticd10_part1/Morticd10_part1")
Mort_part1 <- read.table("/Morticd10_part1/Morticd10_part1", header = TRUE, sep = ',')
Mort_part1 <- read.table("Morticd10_part1/Morticd10_part1", header = TRUE, sep = ',')
head(Mort_part1)
mort
Mort
Mort_part2 <- read.table("Morticd10_part2/Morticd10_part2", header = TRUE, sep = ',')
head(Mort_part2)
?as.data.frame
class(Mort_part1)
View(Mort_part1)
for (i in 1:length(Mort_part2[,1])) {
Mort_part1[length(Mort_part1 + i,)] = Mort_part2[i,]
}
for (i in 1:length(Mort_part2[,1])) {
Mort_part1[length(Mort_part1) + i,] = Mort_part2[i,]
}
#Filter through looking for select countries
library(sqldf)
?sqldf
#import country codes data
countryCodes <- read.table("country_codes", header = TRUE, sep = ',')
head(countryCodes)
#Rename to Mort
Mort_part1 <- Mort1
#Rename to Mort
Mort1 <- Mort_part1
Mort2 <- Mort_part2
#filter through
LesothoData <- sqldf("SELECT * FROM Mort1 AS m1, Mort2 AS m2, countryCodes AS cc WHERE  cc.name = 'Lesotho' AND m1.Country = cc.country AND m2.Country = cc.Country")
LesothoData
LesothoData <- sqldf("SELECT m1.Country FROM Mort1 AS m1, Mort2 AS m2, countryCodes AS cc WHERE  cc. = 1230 AND m1.Country = cc.country AND m2.Country = cc.Country")
LesothoData <- sqldf("SELECT m1.Country FROM Mort1 AS m1, Mort2 AS m2, countryCodes AS cc WHERE  cc.country = 1230 AND m1.Country = cc.country AND m2.Country = cc.Country")
Zimbabwe <- sqldf ("SELECT cc.name FROM countryCodes WHERE name = 'Zimbabwe'")
Zimbabwe <- sqldf ("SELECT cc.name FROM countryCodes AS cc WHERE name = 'Zimbabwe'")
Zimbabwe
Zimbabwe <- sqldf ("SELECT cc.name FROM countryCodes AS cc WHERE name = Zimbabwe")
Zimbabwe <- sqldf ("SELECT cc.name FROM countryCodes AS cc WHERE name = 1230")
Zimbabwe
Zimbabwe <- sqldf ("SELECT cc.name FROM countryCodes AS cc WHERE country = 1230")
Zimbabwe
Zimbabwe <- sqldf ("SELECT name FROM countryCodes WHERE country = 1230")
Zimbabwe
head(countryCodes)
zi <- sqldf("SELECT * FROM countryCodes")
zi
summary(zi)
zi[1,]
zi[2,]
zi$country
countryCodes
#import country codes data
countryCodes <- read.table("country_codes", header = TRUE, sep = ',')
#import country codes data
countryCodes <- read.csv("country_codes", header = TRUE, sep = ',')
countryCodes
Zimbabwe <- sqldf ("SELECT name FROM countryCodes WHERE country = 1230")
Zimbabwe
LesothoData <- sqldf("SELECT m1.Country FROM Mort1 AS m1, Mort2 AS m2, countryCodes AS cc WHERE  cc.country = 1230 AND m1.Country = cc.country AND m2.Country = cc.Country")
LesothoData
LesothoData <- sqldf("SELECT m1.Country FROM Mort1 AS m1, Mort2 AS m2, countryCodes AS cc WHERE  cc.country = 1230")
Zimbabwe <- sqldf ("SELECT Country, Admin1, SubDiv, Year, List, Cause, Sex, Frmat, IM_Frmat, Deaths1, Deaths2, Deaths3  FROM Mort1 WHERE country = 1230")
Zimbabwe
head(Mort1)
Zimbabwe <- sqldf ("SELECT Country, Admin1, SubDiv, Year, List, Cause, Sex, Frmat, IM_Frmat, Deaths1, Deaths2, Deaths3  FROM Mort1 WHERE Country = 1400")
Zimbabwe
#get code for different countries
LesothoCode <- sqldf("SELECT Country FROM countryCodes WHERE name = 'Lesotho'")
LesothoCode
LesothoData <- sqldf("SELECT m2.Country FROM Mort2 AS m2 WHERE  cc.country = 1230 AND m2.Country = cc.Country")
LesothoData <- sqldf("SELECT Country FROM Mort2 WHERE Country = LesothoCode")
LesothoData <- sqldf("SELECT Country FROM Mort2 WHERE Country = 1230")
LesothoData
LesothoData <- sqldf("SELECT Country FROM Mort1 WHERE Country = 1230")
LesothoData <- sqldf("SELECT Country FROM Mort1 WHERE Country = 1230")
ZimbabweCode <- sqldf("SELECT Country FROM countryCodes WHERE name = 'Zimbabwe'")
ZimbabweCode
LesothoData <- sqldf("SELECT Country FROM Mort WHERE Country = 1570")
LesothoData <- sqldf("SELECT Country FROM Mort1 WHERE Country = 1570")
LesothoData <- sqldf("SELECT Country FROM Mort2 WHERE Country = 1570")
LesothoData <- sqldf("SELECT Country FROM Mort2 WHERE Country = 4070")
LesothoData <- sqldf("SELECT Country FROM Mort1 WHERE Country = 4070")
